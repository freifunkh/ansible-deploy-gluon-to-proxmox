---

- name: Configure the hostname
  command: pretty-hostname '{{ gluon_hostname }}'
  delegate_to: '{{ gluon_hostname }}'

# TODO: Do more configureation here...
- name: Configure the Gluon Node
  command: |
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@192.168.1.1 "
      uci set gluon-setup-mode.@setup_mode[0].configured='1'
      uci commit
    "

- name: Check if the node is fastd or wireguard
  command: |
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@192.168.1.1 "
      test -f /lib/gluon/mesh-vpn/wireguard_pubkey.sh
    "
  register: vpn_type_is_wireguard
  failed_when: False

- name: VPN Type Wireguard
  when: "vpn_type_is_wireguard.rc == 0"
  block:
    - name: VPN Type Wireguard - Obtain VPN Key
      command: |
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@192.168.1.1 "
          /lib/gluon/mesh-vpn/wireguard_pubkey.sh
        "
      register: vpn_key

    - name: VPN Type Wireguard - Set vpn type
      set_fact:
        vpn_type: wireguard

- name: VPN Type Fastd
  when: "vpn_type_is_wireguard.rc != 0"
  block:
    - name: VPN Type Fastd - Obtain VPN Key
      command: |
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@192.168.1.1 "
          /etc/init.d/fastd show_key mesh_vpn
        "
      register: vpn_key

    - name: VPN Type Fastd - Set vpn type
      set_fact:
        vpn_type: fastd

- name: Store VPN Key
  local_action: copy
  args:
    content: "{{ vpn_key.stdout_lines[0] }}\n"
    dest: "{{ vpn_type }}_pubkeys/{{gluon_hostname}}"
